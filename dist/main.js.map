{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mEAA8C;AAC9C,mEAA6B;AAC7B,gEAA2B;AAE3B,IAAI,UAAyC,CAAC;AAE9C,SAAS,YAAY;IACnB,UAAU,GAAG,IAAI,wBAAa,CAAC;QAC7B,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;QACX,eAAe,EAAE,SAAS;QAC1B,cAAc,EAAE;YACd,eAAe,EAAE,IAAI;YACrB,gBAAgB,EAAE,KAAK;YACvB,QAAQ,EAAE,aAAoB,KAAK,YAAY;SAChD;KACF,CAAC,CAAC;IAEH,IAAI,IAAsC,EAAE;QAC1C,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;KAC7C;SAAM,EAQN;IAED,UAAU,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QAC3B,UAAU,GAAG,IAAI,CAAC;IACpB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,wDAAwD;AACxD,yDAAyD;AACzD,sDAAsD;AACtD,cAAG,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;AAE9B,oCAAoC;AACpC,cAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAC/B,2DAA2D;IAC3D,8DAA8D;IAC9D,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;QACjC,cAAG,CAAC,IAAI,EAAE,CAAC;KACZ;AACH,CAAC,CAAC,CAAC;AAEH,cAAG,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;IACtB,gEAAgE;IAChE,4DAA4D;IAC5D,IAAI,UAAU,KAAK,IAAI,EAAE;QACvB,YAAY,EAAE,CAAC;KAChB;AACH,CAAC,CAAC,CAAC;;;;;;;;;;;ACvDH;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://snake_gigasoft/./src/main/main.ts","webpack://snake_gigasoft/external node-commonjs \"electron\"","webpack://snake_gigasoft/external node-commonjs \"path\"","webpack://snake_gigasoft/external node-commonjs \"url\"","webpack://snake_gigasoft/webpack/bootstrap","webpack://snake_gigasoft/webpack/before-startup","webpack://snake_gigasoft/webpack/startup","webpack://snake_gigasoft/webpack/after-startup"],"sourcesContent":["import { app, BrowserWindow } from \"electron\";\nimport * as path from \"path\";\nimport * as url from \"url\";\n\nlet mainWindow: Electron.BrowserWindow | null;\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    width: 1100,\n    height: 700,\n    backgroundColor: \"#f2f2f2\",\n    webPreferences: {\n      nodeIntegration: true,\n      contextIsolation: false,\n      devTools: process.env.NODE_ENV !== \"production\",\n    },\n  });\n\n  if (process.env.NODE_ENV === \"development\") {\n    mainWindow.loadURL(\"http://localhost:4000\");\n  } else {\n    mainWindow.loadURL(\n      url.format({\n        pathname: path.join(__dirname, \"renderer/index.html\"),\n        protocol: \"file:\",\n        slashes: true,\n      })\n    );\n  }\n\n  mainWindow.on(\"closed\", () => {\n    mainWindow = null;\n  });\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on(\"ready\", createWindow);\n\n// Quit when all windows are closed.\napp.on(\"window-all-closed\", () => {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\napp.on(\"activate\", () => {\n  // On OS X it\"s common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n","module.exports = require(\"electron\");","module.exports = require(\"path\");","module.exports = require(\"url\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/main/main.ts\");\n",""],"names":[],"sourceRoot":""}